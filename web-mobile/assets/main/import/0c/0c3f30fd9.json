[1,["ecpdLyjvZBwrvm+cedCcQy","beAnSLZ+tK5qWahgWeDfJR","72zt/tP2xJxYhn3XC8xNXO","7afeduMQ5OmINgqxp1jEvM","f4gLyYBK5H46RPCalDdGwK","34ziSTEdhJm7vnp/VrVYwE","cdl/aKO5tNgLERhqoCGvFv","38Xue8/btFEJn2MqOfL8SB","bbhrXC0AxOYLKlruvtcAOL","4fVdOm1p5I85/4/I1QfW53","d2IjIAir1MY4qVmFxnyW6r","2eUijJb/xBd71FaBBACpGU","c70GU5UvNGF4yQuKSOwsSB","35ztyPp/5Dvbj/UkBenfTf","553/ZXIi5E56poA9TRftav","efzyitCadCSYgZSg7HzXlq","a5PJHNdWpBr6lBRQdDzWVp","70iMNfMqdGE4nJnBk7BJbR","4cTWOol8BDzb+SXR2xQAb7","fb0bCXyyxA1bDkoRYgk2E1","11XeZQ5xNG4qLSLHD++ava","f3rI46d1BBCbb2CvnuDkp/","62dklOGG1CW6uYwSk+cvE7","d0zMRIBRZMdYUbsFCv1hin","6bPOU3S5JBUpD4RCyJfFQ2","29wutHcMVHn7JWuG5mD22O","80RsCYq0RNfaLadpMBp2VE","49/bFcHaNAVZvVcTj6hvMj","c4uhlR4lxITZP9B4eSeQsx","3ccijFKUZFsbU/CippHDlh","besk4PEghKWqZd//qObvOd","ddnnOpx+FPNaMABQb1+nrQ","14bUBPPdNNlLvFD9j67MNv","58qaSs3ZJMLZGSGfKpuzkY","db8g518aFDwaB0w8gMzzyk","25ZnHmTQhO3Lk/sEXTCcJD","28Ge+sXmJC/pmHV4IslKUd","69T8sQzs1F9L3kP8psausg","d5GoIjv2ZLgIQQzIb993FR","793ADfasRII5W2s6BJr5Us"],["node","_spriteFrame","_textureSetter","_effectAsset","_parent","root","_N$file","bonusNode","pgLab","pgBarSpr","giftBoxNode","particleNodes","cycleNod","scene","s_BGM","_defaultClip"],[["cc.Node",["_name","_active","_groupIndex","_is3DNode","_id","_opacity","_parent","_components","_contentSize","_children","_prefab","_trs","_color","_eulerAngles"],-3,1,9,5,2,4,7,5,5],"cc.SpriteFrame",["cc.Sprite",["_sizeMode","_srcBlendFactor","_type","_fillRange","node","_materials","_spriteFrame"],-1,1,3,6],["cc.ParticleSystem",["_custom","emissionRate","life","angle","angleVar","startSize","startSizeVar","endSize","endSizeVar","speed","speedVar","tangentialAccel","_dstBlendFactor","_stopped","lifeVar","totalParticles","_positionType","node","_materials","_startColor","_startColorVar","_endColor","_endColorVar","_spriteFrame","posVar"],-14,1,3,8,8,8,8,6,5],["cc.Node",["_name","_parent","_components","_contentSize","_color"],2,1,2,5,5],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],["cc.Label",["_string","_isSystemFontUsed","_N$horizontalAlign","_N$verticalAlign","_fontSize","_lineHeight","node","_materials","_N$file"],-3,1,3,6],["cc.Camera",["_cullingMask","_depth","_clearFlags","_farClip","_ortho","_alignWithScreen","node"],-3,1],["cc.Material",["_name","_techniqueData"],2,11],["cc.Material",["_name","_techniqueData"],1],["cc.AudioClip",["_name","_native","duration"],0],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.TTFFont",["_name","_native"],1],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Canvas",["node","_designResolution"],3,1,5],["248e1SCw/5CQ67GBHW9xsL4",["node","giftBoxNode","pgBarSpr","pgLab","bonusNode"],3,1,1,1,1,1],["6f1d9Hifc1AEKYBziYrrcKK",["shape","auto","loop","actorSpeed","node","cycleNod","particleNodes"],-1,1,1,1],["38e97A5tbNN3JWZL841qBE5",["_easeAction","isAuto","node","scaleItems"],1,1,12],["ef4dazGtkVOX6JqZ1tJww+h",["node","upColor","downColor"],3,1,5,5],["e2b008SWPxORaVOZ6p1COWW",["_easeAction","isAuto","node","fadeItems"],1,1,12],["521c0xH1axJo4mduhcuAOMq",["_easeAction","isAuto","node","moveItems"],1,1,12],["61a9f2Bn2pPyoOPdzw+pIXo",["speed","node","direction"],2,1,5],["6d5604MOEBOqaAMIUMMHuzg",["node"],3,1],["cc.Scene",["_name","_active","_children","_anchorPoint","_trs"],1,2,5,7],["4e516F4tT5AR6zPsxu2dMPV",["node","s_BGM"],3,1,6],["cc.AnimationClip",["_name","_duration","sample","wrapMode","curveData"],-1,11]],[[5,0,1,2],[2,4,5,6,1],[0,0,6,7,10,8,11,2],[6,0,1,2,3,4],[0,0,6,7,8,2],[0,0,6,7,8,11,2],[2,0,4,5,6,2],[12,0,1,2,4],[9,0,1,2],[0,0,6,9,10,2],[0,0,2,6,9,7,8,3],[0,0,5,6,7,12,8,3],[0,0,6,7,10,8,11,13,2],[5,1,1],[6,0,3,2],[2,1,4,5,6,2],[21,0,1,2,3,3],[22,0,1,2,3,3],[8,0,2,1,6,4],[10,0,1,3],[11,0,1,2,4],[13,0,1,3],[14,0,1,3],[0,0,9,7,10,2],[0,0,4,9,7,8,11,3],[0,0,9,7,10,8,2],[0,0,1,6,9,7,8,3],[0,0,6,9,7,8,11,2],[0,0,6,9,11,2],[0,0,6,9,7,10,2],[0,0,6,7,2],[0,0,1,6,7,11,3],[0,0,1,3,2,6,9,5],[0,0,3,6,7,11,3],[0,0,1,6,7,8,11,3],[0,0,6,7,10,8,2],[0,0,6,7,10,12,8,2],[0,0,6,10,8,2],[0,0,6,7,10,2],[4,0,1,2,4,3,2],[4,0,1,2,3,2],[15,0,1,2,3,2],[16,0,1,1],[17,0,1,2,3,4,1],[18,0,1,2,3,4,5,6,5],[2,2,0,3,4,5,4],[19,0,1,2,3,3],[20,0,1,2,1],[7,0,4,5,1,2,3,6,7,8,7],[7,0,1,2,3,6,7,5],[23,0,1,2,2],[3,12,0,13,15,1,2,14,3,4,5,6,7,8,16,9,10,11,17,18,19,20,21,22,24,23,18],[3,0,1,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,24,23,13],[3,12,0,13,1,2,14,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,23,16],[24,0,1],[25,0,1,2,3,4,3],[26,0,1,1],[8,0,1,3,4,5,6,6],[27,0,1,2,3,4,5]],[[[{"name":"eye_line","rect":[0,0,32,18],"offset":[0,0],"originalSize":[32,18],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[9]],[[[8,"BoxRadius",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_OUTLINE":false}},"props",11,[{"outlineWidth":1},"size",8,[0,320,128],"leftTop",8,[0,160,64],"rightTop",8,[0,160,64],"rightBottom",8,[0,160,64],"leftBottom",8,[0,160,64],"smoothThresh",8,[0,0.99,1],"outlineColor",8,[4,4294967295]]]]]],0,0,[0],[3],[10]],[[{"name":"zanshangcode","rect":[0,0,468,468],"offset":[0,0],"originalSize":[468,468],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[11]],[[[8,"TransparentGradient",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{},"upColor",8,[4,4294967295],"downColor",8,[4,4294967295]]]]]],0,0,[0],[3],[12]],[[{"name":"hand_left","rect":[0,0,56,78],"offset":[0,0],"originalSize":[56,78],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[13]],[[{"name":"circleWhite","rect":[1,1,29,29],"offset":[-0.5,0.5],"originalSize":[32,32],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[14]],[[{"name":"icon_giftbox","rect":[25,48,977,935],"offset":[1.5,-3.5],"originalSize":[1024,1024],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[15]],[[[19,"PictureSelfCycle",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[16]],[[{"name":"face_pink","rect":[2,0,143,63],"offset":[1,0.5],"originalSize":[145,64],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[17]],[[[20,"bgm",".mp3",152.058776],-1],0,0,[],[],[]],[[{"name":"face_line","rect":[0,0,11,11],"offset":[0,0],"originalSize":[11,11],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[18]],[[{"name":"heart","rect":[0,0,38,33],"offset":[0,0],"originalSize":[38,33],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[19]],[[{"name":"paper_airplane_yellow","rect":[0,0,206,100],"offset":[0,0],"originalSize":[206,100],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[20]],[[[7,"PictureSelfCycle",[{"hash":1494421124,"record":null,"name":"PictureSelfCycle|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  vec2 direction;\n  float time;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 dire = normalize(direction);\n  vec2 uv = vec2(v_uv0.x - time * dire.x, v_uv0.y + time * dire.y);\n  uv = fract(uv);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 direction;\nuniform float time;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 dire = normalize(direction);\n  vec2 uv = vec2(v_uv0.x - time * dire.x, v_uv0.y + time * dire.y);\n  uv = fract(uv);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"direction","type":14,"count":1},{"name":"time","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"PictureSelfCycle|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"direction":{"type":14,"value":[1,1]},"time":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[[21,"仓耳与墨W03","仓耳与墨W03.ttf"],-1],0,0,[],[],[]],[[{"name":"minimal","rect":[0,0,2,2],"offset":[0,0],"originalSize":[2,2],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[21]],[[{"name":"face","rect":[0,0,172,172],"offset":[0,0],"originalSize":[172,172],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[22]],[[{"name":"icon_deco_ribbons","rect":[0,0,1938,652],"offset":[0,0],"originalSize":[1938,652],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[23]],[[[7,"TransparentGradient",[{"hash":84667206,"record":null,"name":"TransparentGradient|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  vec4 upColor;\n  vec4 downColor;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o = upColor * (1. - v_uv0.y) + downColor * v_uv0.y;\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 upColor;\nuniform vec4 downColor;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o = upColor * (1. - v_uv0.y) + downColor * v_uv0.y;\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"upColor","type":16,"count":1},{"name":"downColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"TransparentGradient|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"upColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"downColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}}}}]}]]],0,0,[],[],[]],[[[22,"main",null],[23,"bixin_emoji",[-3,-4,-5,-6,-7,-8,-9,-10],[[41,true,-2,[50],49]],[13,-1]],[24,"Canvas","a5esZu+45LA5mBpvttspPD",[-18,-19,-20,-21,-22],[[42,-11,[5,1080,1920]],[14,45,-12],[43,-17,-16,-15,-14,-13]],[5,1080,1920],[540,960,0,0,0,0,1,1,1,1]],[9,"faceItems",1,[-23,-24,-25,-26,-27,-28,-29,-30],[0,"5cld23ZndNuoLHUsJ5eiAo",1]],[25,"BorderShapeCycler",[-35,-36],[[44,1,true,true,2,-34,-33,-32]],[13,-31],[5,512,512]],[10,"UI",2,2,[-38,-39,-40,-41,-42,-43],[[3,45,100,100,-37]],[5,1080,1920]],[26,"Bonus",false,5,[-45,-46,-47,-48],[[3,45,100,100,-44]],[5,1080,1920]],[10,"World",1,2,[-50,-51,-52],[[3,45,100,100,-49]],[5,1080,1920]],[27,"zanshangcode",6,[1,4],[[1,-53,[55],56],[46,7,true,-54,[[[2,0,0,0,0],[2,0.5,1,1,1]],8,8]]],[5,468,468],[0,-64,0,0,0,0,1,1,1,1]],[4,"BG",7,[[6,0,-55,[1],2],[3,45,100,100,-56],[47,-57,[4,4287810811],[4,4284527864]]],[5,1080,1920]],[28,"Progress",5,[-58,-59,-60],[0,-600,0,0,0,0,1,1,1,1]],[11,"BG",120,6,[[6,0,-61,[15],16],[3,45,100,100,-62],[16,4,true,-63,[[[0,0,0],[0,0.3,120]],8,8]]],[4,4278190080],[5,1080,1920]],[5,"text",6,[[48,"V我5块，快乐超级加倍~",64,64,false,1,1,-64,[57],58],[16,4,true,-65,[[[0,0,0],[0,0.3,255]],8,8]],[17,4,true,-66,[[[2,0,-128,-432,0],[2,0.5,0,-432,0]],8,8]]],[5,690.43,80.64],[0,-432,0,0,0,0,1,1,1,1]],[5,"ribbons",5,[[15,1,-67,[7],8],[50,0.06,-68,[0,1,0]]],[5,1938,652],[0,774.149,0,0,0,0,1,1,1,1]],[5,"giftbox",5,[[15,1,-69,[9],10]],[5,977,935],[0,-48,0,0,0,0,1,0.8,0.8,1]],[5,"title",6,[[1,-70,[17],18],[17,4,true,-71,[[[2,0,0,1200,0],[2,0.5,0,496,0]],8,8]]],[5,958,486],[0,496,0,0,0,0,1,1,1,1]],[9,"particles",4,[-72],[0,"9c5yczYyJFWJYIgbPtckEv",4]],[29,"part",16,[-74],[[51,1,true,false,500,500,0.8,0.5,0,0,10,5,5,3,1,0,0,0,-73,[53],[4,4291603267],[4,3321888768],[4,4294746592],[4,3154116608],[0,3,3],54]],[0,"64gtgyx/lPnpb6a3ILatWF",4]],[4,"TopHandler",2,[[14,45,-75],[54,-76]],[5,1080,1920]],[55,"New Node",false,[2],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[30,"Audios",2,[[56,-77,0]]],[4,"CamWorld",7,[[18,2,0,-10,-78]],[5,960,640]],[31,"pcl_airplane",false,7,[[52,true,3,15,160,16,100,20,40,20,240,60,0,-79,[3],[4,4294967295],[4,0],[4,4294967295],[4,0],[0,0,1600],4]],[750,-276,0,0,0,0,1,1,1,1]],[32,"World3d",false,true,3,2,[-80]],[33,"CamWorld3d",true,23,[[57,8,-8,1024,false,false,-81]],[0,0,10,0,0,0,1,1,1,1]],[4,"CamUI",5,[[18,4,0,-4,-82]],[5,960,640]],[34,"happy_61",false,5,[[6,0,-83,[5],6]],[5,958,486],[0,90.816,0,0,0,0,1,1,1,1]],[11,"bg",120,10,[[6,0,-84,[11],12]],[4,4278190080],[5,640,48]],[39,"bar",10,[-85],[4,4291655993],[5,640,48]],[45,3,0,1,28,[13]],[40,"text",10,[-86],[5,60.92,50.4]],[49,"0%",false,1,1,30,[14]],[35,"face",1,[[1,-87,[19],20]],[0,"bdt49eqYZJi7rhaargWq1U",1],[5,172,172]],[2,"eye_dot",3,[[1,-88,[21],22]],[0,"6adkPdq3JMBqZAMJ9OGgxF",1],[5,16,22],[41.711,26.769,0,0,0,0,1,1,1,1]],[2,"eye_line",3,[[1,-89,[23],24]],[0,"2fy01vFkdIbpgN0pzlvkCy",1],[5,32,18],[-20.544,29.882,0,0,0,0,1,1,1,1]],[36,"face_pink",3,[[1,-90,[25],26]],[0,"34i8Zrov5CUrY+UFjc48FT",1],[4,4284901110],[5,143,63]],[2,"face_line1",3,[[1,-91,[27],28]],[0,"52m3f9yAhOiY+Y/3xziFIo",1],[5,11,11],[-49.047,2.168,0,0,0,0,1,1,1,1]],[2,"face_line2",3,[[1,-92,[29],30]],[0,"dbBqU90uRD6Yw2FW2zAFzz",1],[5,11,11],[-36.04,2.981,0,0,0,0,1,1,1,1]],[2,"face_line3",3,[[1,-93,[31],32]],[0,"7arNlK+M1O4anK69R6Go6D",1],[5,11,11],[50.402,2.981,0,0,0,0,1,1,1,1]],[2,"face_line4",3,[[1,-94,[33],34]],[0,"6dOvPh//1CV73wXBzFN+12",1],[5,11,11],[62.867,2.71,0,0,0,0,1,1,1,1]],[2,"mouth",3,[[1,-95,[35],36]],[0,"12QGcLZ2ZFvrymAuDreCXw",1],[5,49,21],[9.827,-13.228,0,0,0,0,1,1,1,1]],[2,"hand_left",1,[[1,-96,[37],38]],[0,"53R2+I1j5M7qRuo4vt8za7",1],[5,56,78],[-51.779,-50.645,0,0,0,0,1,1,1,1]],[2,"hand_right",1,[[1,-97,[39],40]],[0,"1dn0V6H49PUbeZFzrS7N8b",1],[5,56,78],[54.046,-55.936,0,0,0,0,1,-0.8,0.8,1]],[2,"heart1",1,[[1,-98,[41],42]],[0,"5cgNU1/m9BC5hizMmtN9Kq",1],[5,38,33],[-60.288,16.91,0,0,0,0,1,1,1,1]],[12,"heart2",1,[[1,-99,[43],44]],[0,"5acjnEkl9DT7///zzzopWx",1],[5,38,33],[-38.231,55.141,0,0,0,-0.20791169081775934,0.9781476007338057,0.7,0.7,1],[1,0,0,-24]],[2,"heart3",1,[[1,-100,[45],46]],[0,"78GQFNFhZMXqGDx39wqf0K",1],[5,38,33],[53.085,16.91,0,0,0,0,1,-1,1,1]],[12,"heart4",1,[[1,-101,[47],48]],[0,"b4ruTrhAJMobCtAOLHHjhH",1],[5,38,33],[29.614,55.141,0,0,0,0.20791169081775934,0.9781476007338057,-0.7,0.7,1],[1,0,0,24]],[37,"limBorder",4,[0,"44W6XtkNBP06e+dzTBAoR2",4],[5,512,512]],[38,"sub",17,[[53,1,true,false,30,2,0.3,0,360,10,3,3,2,10,5,0,-102,[51],[4,2026679107],[4,0],[4,1828495840],[4,0],52]],[0,"ffU69rMsdFGa/eBynvb4UK",4]]],0,[0,5,1,0,0,1,0,-1,32,0,-2,3,0,-3,41,0,-4,42,0,-5,43,0,-6,44,0,-7,45,0,-8,46,0,0,2,0,0,2,0,7,6,0,8,31,0,9,29,0,10,14,0,0,2,0,-1,20,0,-2,7,0,-3,23,0,-4,5,0,-5,18,0,-1,33,0,-2,34,0,-3,35,0,-4,36,0,-5,37,0,-6,38,0,-7,39,0,-8,40,0,5,4,0,11,16,0,12,47,0,0,4,0,-1,47,0,-2,16,0,0,5,0,-1,25,0,-2,26,0,-3,13,0,-4,14,0,-5,10,0,-6,6,0,0,6,0,-1,11,0,-2,15,0,-3,8,0,-4,12,0,0,7,0,-1,21,0,-2,9,0,-3,22,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,-1,27,0,-2,28,0,-3,30,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,15,0,0,15,0,-1,17,0,0,17,0,-1,48,0,0,18,0,0,18,0,0,20,0,0,21,0,0,22,0,-1,24,0,0,24,0,0,25,0,0,26,0,0,27,0,-1,29,0,-1,31,0,0,32,0,0,33,0,0,34,0,0,35,0,0,36,0,0,37,0,0,38,0,0,39,0,0,40,0,0,41,0,0,42,0,0,43,0,0,44,0,0,45,0,0,46,0,0,48,0,13,19,1,4,8,2,4,19,4,4,8,102],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,31],[14,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,15,-1,-1,1,-1,1,-1,1,-1,6,1,6],[24,25,1,0,26,0,4,27,28,0,29,0,1,0,0,0,1,0,4,0,30,0,31,0,32,0,33,0,2,0,2,0,2,0,2,0,34,0,5,0,5,0,3,0,3,0,3,0,3,6,6,0,7,0,7,35,36,0,8,1,8]],[[[58,"bixin_emoji",1.1,20,2,[{},"paths",11,[{"faceItems":{"props":{"x":[{"frame":0,"value":0},{"frame":0.5,"value":-15.176},{"frame":0.55,"value":-4.017},{"frame":1.05,"value":14.73},{"frame":1.1,"value":0}],"scaleX":[{"frame":0,"value":1},{"frame":0.5,"value":1},{"frame":0.55,"value":-1,"curve":"constant"},{"frame":1.05,"value":-1},{"frame":1.1,"value":1}]}},"heart1":{"props":{"position":[{"frame":0,"value":[-60.288,16.91,0]},{"frame":0.5,"value":[-67.136,34.341,0]}],"opacity":[{"frame":0,"value":255},{"frame":0.5,"value":0}]}},"heart2":{"props":{"position":[{"frame":0,"value":[-38.231,55.141,0]},{"frame":0.5,"value":[-33.251,68.837,0]}],"opacity":[{"frame":0,"value":255},{"frame":0.5,"value":0}]}},"heart3":{"props":{"position":[{"frame":0,"value":[53.085,16.91,0]},{"frame":0.55,"value":[53.085,16.91,0]},{"frame":1.05,"value":[65.136,33.425,0]}],"opacity":[{"frame":0,"value":0,"curve":"constant"},{"frame":0.55,"value":255},{"frame":1.05,"value":0}]}},"heart4":{"props":{"position":[{"frame":0,"value":[29.614,55.141,0]},{"frame":0.55,"value":[29.614,55.141,0]},{"frame":1.05,"value":[22.919,73.888,0]}],"opacity":[{"frame":0,"value":0,"curve":"constant"},{"frame":0.55,"value":255},{"frame":1.05,"value":0}]}}},"hand_left",11,[{},"props",11,[{"position":[{"frame":0,"value":[-51.779,-50.645,0]},{"frame":0.5,"value":[-51.779,-57.493,0]},{"frame":0.55,"value":[-51.779,-57.493,0]},{"frame":1.05,"value":[-51.779,-50.645,0]}]},"scale",12,[[[{"frame":0},"value",8,[1,1,1,1]],[{"frame":0.5},"value",8,[1,0.8,0.8,1]],[{"frame":0.55},"value",8,[1,0.8,0.8,1]],[{"frame":1.05},"value",8,[1,1,1,1]]],11,11,11,11]]],"hand_right",11,[{},"props",11,[{"position":[{"frame":0,"value":[54.046,-57.493,0]},{"frame":0.5,"value":[54.046,-50.645,0]},{"frame":0.55,"value":[54.046,-50.645,0]},{"frame":1.05,"value":[54.046,-57.493,0]}]},"scale",12,[[[{"frame":0},"value",8,[1,-0.8,0.8,1]],[{"frame":0.5},"value",8,[1,-1,1,1]],[{"frame":0.55},"value",8,[1,-1,1,1]],[{"frame":1.05},"value",8,[1,-0.8,0.8,1]]],11,11,11,11]]]]]]],0,0,[],[],[]],[[[7,"BoxRadius",[{"hash":2032089347,"record":null,"name":"BoxRadius|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nin vec4 a_color;\nout vec2 v_uv0;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec2 v_uv0;\nin vec4 v_color;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 smoothThresh;\n  vec2 size;\n  vec2 leftTop;\n  vec2 rightTop;\n  vec2 rightBottom;\n  vec2 leftBottom;\n  vec4 u_uvOffset;\n  float u_uvRotated;\n};\nfloat inEllipse(vec2 origin, float radius_a, float radius_b, vec2 coordinate) {\n  coordinate.x -= origin.x;\n  coordinate.y -= origin.y;\n  return pow(coordinate.x, 2.0) / pow(radius_a, 2.0) + pow(coordinate.y, 2.0) / pow(radius_b, 2.0);\n}\nfloat getBorderSmoothAlpha(vec2 uv) {\n  float inEps = 1.;\n  if(uv.x < leftTop.x && uv.y > size.y - leftTop.y) {\n    inEps = inEllipse(vec2(leftTop.x, size.y - leftTop.y), leftTop.x, leftTop.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  } else if(uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y) {\n    inEps = inEllipse(vec2(size.x - rightTop.x, size.y - rightTop.y), rightTop.x, rightTop.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  } else if(uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) {\n    inEps = inEllipse(vec2(size.x - rightBottom.x, rightBottom.y), rightBottom.x, rightBottom.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  } else if(uv.x < leftBottom.x && uv.y < leftBottom.y) {\n    inEps = inEllipse(vec2(leftBottom.x, leftBottom.y), leftBottom.x, leftBottom.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  }\n  return smoothThresh.y;\n}\n#if USE_OUTLINE\nuniform OutlineProps {\n  vec4 outlineColor;\n  float outlineWidth;\n};\nbool checkHaveOutline(vec2 uv){\n  if(outlineWidth == 0.0) return false;\n  if ((uv.x < outlineWidth || uv.x + outlineWidth > size.x\n      || uv.y < outlineWidth || uv.y + outlineWidth > size.y)\n    && !((uv.x < leftTop.x && uv.y > size.y - leftTop.y) || (uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y)\n      || (uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) || (uv.x < leftBottom.x && uv.y < leftBottom.y))) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x - outlineWidth, uv.y)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x + outlineWidth, uv.y)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x - outlineWidth, uv.y - outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x - outlineWidth, uv.y + outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x + outlineWidth, uv.y - outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x + outlineWidth, uv.y + outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x, uv.y - outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x, uv.y + outlineWidth)) < 1.) return true;\n  return false;\n}\n#endif\nvoid main () {\n  vec4 color = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec2 uvOffset;\n  uvOffset.x = (v_uv0.x - u_uvOffset.x) / (u_uvOffset.z - u_uvOffset.x);\n  uvOffset.y = (v_uv0.y - u_uvOffset.y) / (u_uvOffset.w - u_uvOffset.y);\n  if (u_uvRotated > .5) {\n    float tmp = uvOffset.x; uvOffset.x = uvOffset.y; uvOffset.y = 1. - tmp;\n  }\n  vec2 uv = vec2(uvOffset.x, 1.0 - uvOffset.y);\n  uv.xy *= size.xy;\n  float originAlpha = color.a;\n  float smoothAplha = getBorderSmoothAlpha(uv);\n  color *= v_color;\n  #if USE_OUTLINE\n  if (checkHaveOutline(uv)) {\n    color = mix(color, outlineColor, originAlpha);\n  }\n  #endif\n  color *= smoothAplha;\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nattribute vec4 a_color;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec2 v_uv0;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n#endif\nuniform vec2 smoothThresh;\nuniform vec2 size;\nuniform vec2 leftTop;\nuniform vec2 rightTop;\nuniform vec2 rightBottom;\nuniform vec2 leftBottom;\nuniform vec4 u_uvOffset;\nuniform float u_uvRotated;\nfloat inEllipse(vec2 origin, float radius_a, float radius_b, vec2 coordinate) {\n  coordinate.x -= origin.x;\n  coordinate.y -= origin.y;\n  return pow(coordinate.x, 2.0) / pow(radius_a, 2.0) + pow(coordinate.y, 2.0) / pow(radius_b, 2.0);\n}\nfloat getBorderSmoothAlpha(vec2 uv) {\n  float inEps = 1.;\n  if(uv.x < leftTop.x && uv.y > size.y - leftTop.y) {\n    inEps = inEllipse(vec2(leftTop.x, size.y - leftTop.y), leftTop.x, leftTop.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  } else if(uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y) {\n    inEps = inEllipse(vec2(size.x - rightTop.x, size.y - rightTop.y), rightTop.x, rightTop.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  } else if(uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) {\n    inEps = inEllipse(vec2(size.x - rightBottom.x, rightBottom.y), rightBottom.x, rightBottom.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  } else if(uv.x < leftBottom.x && uv.y < leftBottom.y) {\n    inEps = inEllipse(vec2(leftBottom.x, leftBottom.y), leftBottom.x, leftBottom.y, uv);\n    return smoothstep(smoothThresh.y, smoothThresh.x, inEps);\n  }\n  return smoothThresh.y;\n}\n#if USE_OUTLINE\nuniform vec4 outlineColor;\nuniform float outlineWidth;\nbool checkHaveOutline(vec2 uv){\n  if(outlineWidth == 0.0) return false;\n  if ((uv.x < outlineWidth || uv.x + outlineWidth > size.x\n      || uv.y < outlineWidth || uv.y + outlineWidth > size.y)\n    && !((uv.x < leftTop.x && uv.y > size.y - leftTop.y) || (uv.x > size.x - rightTop.x && uv.y > size.y - rightTop.y)\n      || (uv.x > size.x - rightBottom.x && uv.y < rightBottom.y) || (uv.x < leftBottom.x && uv.y < leftBottom.y))) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x - outlineWidth, uv.y)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x + outlineWidth, uv.y)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x - outlineWidth, uv.y - outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x - outlineWidth, uv.y + outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x + outlineWidth, uv.y - outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x + outlineWidth, uv.y + outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x, uv.y - outlineWidth)) < 1.) return true;\n  if (getBorderSmoothAlpha(vec2(uv.x, uv.y + outlineWidth)) < 1.) return true;\n  return false;\n}\n#endif\nvoid main () {\n  vec4 color = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec2 uvOffset;\n  uvOffset.x = (v_uv0.x - u_uvOffset.x) / (u_uvOffset.z - u_uvOffset.x);\n  uvOffset.y = (v_uv0.y - u_uvOffset.y) / (u_uvOffset.w - u_uvOffset.y);\n  if (u_uvRotated > .5) {\n    float tmp = uvOffset.x; uvOffset.x = uvOffset.y; uvOffset.y = 1. - tmp;\n  }\n  vec2 uv = vec2(uvOffset.x, 1.0 - uvOffset.y);\n  uv.xy *= size.xy;\n  float originAlpha = color.a;\n  float smoothAplha = getBorderSmoothAlpha(uv);\n  color *= v_color;\n  #if USE_OUTLINE\n  if (checkHaveOutline(uv)) {\n    color = mix(color, outlineColor, originAlpha);\n  }\n  #endif\n  color *= smoothAplha;\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_OUTLINE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Properties","binding":1,"members":[{"name":"smoothThresh","type":14,"count":1},{"name":"size","type":14,"count":1},{"name":"leftTop","type":14,"count":1},{"name":"rightTop","type":14,"count":1},{"name":"rightBottom","type":14,"count":1},{"name":"leftBottom","type":14,"count":1},{"name":"u_uvOffset","type":16,"count":1},{"name":"u_uvRotated","type":13,"count":1}],"defines":[]},{"name":"OutlineProps","binding":2,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineWidth","type":13,"count":1}],"defines":["USE_OUTLINE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"BoxRadius|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"smoothThresh":{"type":14,"value":[0.99,1]},"size":{"type":14,"value":[0,0]},"leftTop":{"type":14,"value":[0,0]},"rightTop":{"type":14,"value":[0,0]},"rightBottom":{"type":14,"value":[0,0]},"leftBottom":{"type":14,"value":[0,0]},"u_uvOffset":{"type":16,"value":[0,0,1,1]},"u_uvRotated":{"type":13,"value":[0]},"outlineColor":{"type":16,"value":[1,1,1,1],"inspector":{"type":"color"}},"outlineWidth":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]],[[{"name":"mouth","rect":[0,0,49,21],"offset":[0,0],"originalSize":[49,21],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[37]],[[{"name":"eye_dot","rect":[0,0,16,22],"offset":[0,0],"originalSize":[16,22],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[38]],[[{"name":"icon_happy_61","rect":[0,0,958,486],"offset":[0,0],"originalSize":[958,486],"capInsets":[0,0,0,0]}],[1],0,[0],[2],[39]]]]